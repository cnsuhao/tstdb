!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
BUF_POOL_SIZE	tstserver.c	36;"	d	file:
MAX_BODY_SIZE	tstserver.c	37;"	d	file:
MAX_EPOLL_FD	tstserver.c	34;"	d	file:
WORKER_COUNT	tstserver.c	35;"	d	file:
alloc_buf	buffer_pool.c	/^buffer_t* alloc_buf(bp_t* this){$/;"	f
alloc_io_data	tstserver.c	/^alloc_io_data(int client_fd, struct sockaddr_in *client_addr, int worker_no)$/;"	f	file:
append_recv_data	tstserver.c	/^append_recv_data(struct io_data_t *p)$/;"	f	file:
append_result	tst.c	/^void append_result(tst_db *db,  uint32 node, char result[][MAX_KEY_SIZE], int * result_size)$/;"	f	file:
append_send_data	tstserver.c	/^append_send_data(struct io_data_t *p, const char *data, int data_len)$/;"	f
bp_new	buffer_pool.c	/^bp_t* bp_new(unsigned int n_items){$/;"	f
cmd_do_delete	cmd_process.c	/^void cmd_do_delete(struct io_data_t* p, const char* header )$/;"	f
cmd_do_get	cmd_process.c	/^void cmd_do_get(struct io_data_t* p, const char* header )$/;"	f
cmd_do_set	cmd_process.c	/^void cmd_do_set(struct io_data_t* p, const char* header, const char* body )$/;"	f
create_tst_db	tst.c	/^tst_db *create_tst_db()$/;"	f
destroy_fd	tstserver.c	/^destroy_fd(int myg_ep_fd, int client_fd, struct io_data_t *data_ptr, int case_no)$/;"	f	file:
destroy_io_data	tstserver.c	/^destroy_io_data(struct io_data_t *io_data_ptr)$/;"	f	file:
dfs	tst.c	/^void dfs(tst_db *db, uint32 node, char result[][MAX_KEY_SIZE], int* result_size)$/;"	f	file:
do_accept	tstserver.c	/^do_accept()$/;"	f	file:
do_bind_and_listen	tstserver.c	/^do_bind_and_listen(int port_listening, const char *ip_binding)$/;"	f	file:
ends_with	cmd_process.c	/^static int ends_with(const char* s1, const char* s2)$/;"	f	file:
ensure_enough_space	tst.c	/^static void ensure_enough_space(tst_db * db)$/;"	f	file:
exit_hook	tstserver.c	/^exit_hook(int number)$/;"	f	file:
fix_buf_len	tstserver.c	/^fix_buf_len(struct io_data_t *p)$/;"	f	file:
free_buf	buffer_pool.c	/^void free_buf(bp_t* this , buffer_t* buf){$/;"	f
free_in_buf_list	tstserver.c	/^free_in_buf_list(struct io_data_t *p)$/;"	f	file:
free_node	tst.c	/^static void free_node(tst_db *db, uint32 node)$/;"	f	file:
free_out_buf_list	tstserver.c	/^free_out_buf_list(struct io_data_t *p)$/;"	f	file:
free_tst_db	tst.c	/^void free_tst_db(tst_db * db)$/;"	f
g_bufpoll	tstserver.c	/^bp_t *g_bufpoll[WORKER_COUNT];$/;"	v
g_data_file	tstserver.c	/^FILE *g_data_file, *g_index_file;$/;"	v
g_delay	tstserver.c	/^int g_delay;$/;"	v
g_ep_fd	tstserver.c	/^int g_ep_fd[WORKER_COUNT], listen_fd;$/;"	v
g_index_file	tstserver.c	/^FILE *g_data_file, *g_index_file;$/;"	v
g_io_table	tstserver.c	/^struct io_data_t g_io_table[WORKER_COUNT][MAX_EPOLL_FD];$/;"	v	typeref:struct:io_data_t
g_logger	tstserver.c	/^FILE *g_logger;$/;"	v
g_nolog	tstserver.c	/^int g_nolog;$/;"	v
g_shutdown_flag	tstserver.c	/^int g_shutdown_flag;$/;"	v
get_body_len	tstserver.c	/^get_body_len(struct io_data_t *p,char* s_head_buf)$/;"	f	file:
get_buf	buffer_pool.c	/^buffer_t* get_buf(bp_t *this,unsigned int nth){$/;"	f
handle_cmd	tstserver.c	/^handle_cmd(struct io_data_t *p, char *header, char *body)$/;"	f	file:
handle_core	tstserver.c	/^handle_core(void *param)$/;"	f	file:
handle_input	tstserver.c	/^handle_input(int worker_no, struct io_data_t *client_io_ptr, char *s_body_buf,char* s_head_buf)$/;"	f	file:
handle_output	tstserver.c	/^handle_output(int worker_no, struct io_data_t *client_io_ptr)$/;"	f	file:
has_body	tstserver.c	/^has_body(struct io_data_t *p)$/;"	f	file:
has_header	tstserver.c	/^has_header(struct io_data_t *p)$/;"	f	file:
init_data	tstserver.c	/^static void init_data(const char* data_file_name)$/;"	f	file:
insert	tst.c	/^static uint32 insert(tst_db * db, uint32 node, const char *s, uint64 value,$/;"	f	file:
insert_batch	test_tst.c	/^void insert_batch(tst_db* db, int total){$/;"	f
listen_fd	tstserver.c	/^int g_ep_fd[WORKER_COUNT], listen_fd;$/;"	v
main	test_tst.c	/^int main(int argc ,char * argv[]){$/;"	f
main	tstserver.c	/^main(int argc, char **argv)$/;"	f
new_node	tst.c	/^static uint32 new_node(tst_db * db)$/;"	f	file:
new_tst_db	tst.c	/^static tst_db *new_tst_db(uint32 cap)$/;"	f	file:
output	test_tst.c	/^void output(tst_db* db){$/;"	f
parse_args	tstserver.c	/^parse_args(int argc, char *argv[], char **ip_binding, int *port_listening, char **data_file, char **log_file)$/;"	f	file:
read_body	tstserver.c	/^read_body(struct io_data_t *p, char *body)$/;"	f	file:
read_header	tstserver.c	/^read_header(struct io_data_t *p, char *header)$/;"	f	file:
remove_node	tst.c	/^static uint32 remove_node(tst_db * db, uint32 node)$/;"	f	file:
reverse_str_to	tst.c	/^void reverse_str_to(const char* s1, char * s2)$/;"	f	file:
search	tst.c	/^static uint32 search(tst_db * db,  const char *key, int len_of_s)$/;"	f	file:
search_with_path	tst.c	/^static uint32 search_with_path(tst_db * db,  const char *key, int len_of_s,char* path)$/;"	f	file:
setnonblocking	tstserver.c	/^setnonblocking(int fd)$/;"	f	file:
starts_with	tstserver.c	/^static int starts_with(const char* s1, const char* s2)$/;"	f	file:
testcase_1	test_tst.c	/^void testcase_1(){$/;"	f
testcase_2	test_tst.c	/^void testcase_2()$/;"	f
tst_delete	tst.c	/^void tst_delete(tst_db *db,const char *key)$/;"	f
tst_get	tst.c	/^uint64 tst_get(tst_db * db, const char *key)$/;"	f
tst_prefix	tst.c	/^void tst_prefix(tst_db *db, const char* prefix,char result[][MAX_KEY_SIZE],int* result_size)$/;"	f
tst_put	tst.c	/^void tst_put(tst_db * db, const char *key, uint64 value)$/;"	f
tstserver_log	tstserver.c	/^tstserver_log(const char *fmt, ...)$/;"	f	file:
usage	tstserver.c	/^usage()$/;"	f	file:
